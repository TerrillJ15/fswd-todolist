<%= javascript_pack_tag 'index', 'data-turbolinks-track': 'reload' %>

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>TO-DO List</title>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
      crossorigin="anonymous"
    ></script>
    <link href="../../../assets/stylesheets/custom.css" rel="stylesheet" />
    <script
      src="https://kit.fontawesome.com/e067495424.js"
      crossorigin="anonymous"
    ></script>

    <script>
      /**
       * The array of column objects.
       */
      const COLUMNS = [
        {
          title: "To-Do",
          value: "content",
        },
      ];

      /**
       * Array of stored row items. Each row item is a @type {Task} object.
       * @type {Task} = { id: number, content: string, completed: boolean, due: datetime, updated_at: datetime, created_at: datetime }
       */
      let data = [];

      /** The value to filter on. -1 is all and boolean is for the completed state. */
      let filter = -1;

      /**
       * Called is when the page is loaded.
       * Loads the filter value if previously set.
       * Loads data if previously used.
       * Renders the table.
       */
      window.onload = function () {
        // load the stored filter if present; -1 is default
        let storedFilter = localStorage.getItem("to-do-list-filter");
        if (storedFilter !== undefined) {
          filter =
            storedFilter === "true"
              ? true
              : storedFilter === "false"
              ? false
              : -1;
        }

        // check the filter button that is loaded
        let filterName = "filter-all";
        if (filter === true) {
          filterName = "filter-completed";
        } else if (filter === false) {
          filterName = "filter-active";
        }
        $(`#${filterName}`).prop("checked", true);

        // retrieve the task and render the table
        $(document).ready(function () {
          $.ajax({
            type: "GET",
            url: "api/tasks?api_key=1",
            dataType: "json",
            success: function (response, _textStatus) {
              if (response && response.tasks) {
                data = response.tasks;
              }
              renderTable();
            },
            error: function (_request, _textStatus, errorMessage) {
              alert("Unable to retrieve tasks.");
              console.log(errorMessage);
            },
          });
        });
      };

      /**
       * Renders the dynamic aspects of the table which includes the data.
       */
      function renderTable() {
        renderData();
      }

      /**
       * Renders all the data matching the current filter as table rows.
       */
      function renderData() {
        let displayData = data;
        if (filter !== -1) {
          displayData = data.filter((d) => d.completed === filter);
        }
        for (let i = 0; i < displayData.length; i++) {
          renderRow(displayData[i]);
        }
      }

      /**
       * Renders each row with the proper cells.
       * Each cell is render for it's data value and
       * will be formatted if desired. Each row
       * will have a mark complete and delete button at the end.
       *
       * @param {Task} row Current row with the values.
       */
      function renderRow(row) {
        const taskId = `row-${row.id}`;
        $("tbody").append(`<tr id="${taskId}"></tr>`);
        for (let i = 0; i < COLUMNS.length; i++) {
          $(`#row-${row.id}`).append(
            `<td id="cell-${row.id}-${COLUMNS[i].value}" class="${
              COLUMNS[i].value
            }">${
              // data value; use format function if provided, otherwise return data as is
              COLUMNS[i].format
                ? COLUMNS[i].format(row, [COLUMNS[i].value])
                : row[COLUMNS[i].value] ?? ""
            }</td>`
          );
        }
        $(`#row-${row.id}`).append(`
    <td style="width: 1%">
    <label id="cb-label-${
      row.id
    }-completed" class="checkbox-container" title="${
          row.completed
            ? "Marked Completed. Click to make active again."
            : "Currently Active. Click to mark as complete."
        }">
      <input id="cb-${row.id}-completed" type="checkbox"${
          row.completed ? ' checked="true"' : ""
        } onclick="toggleCompleted(${row.id})">
      <span class="label"></span>
      <span class="checkbox"></span>
      <span class="checkmark"></span>
    </label>
    <td style="width: 1%">
      <span class="nav-item rounded-pill btn btn-lg btn-outline-danger py-0 px-1 border-0" title="Click to delete.">
        <span
          class="nav-link"
          href="#"
          onclick="deleteRow(${row.id})"
          ><i class="fas fa-trash"></i
        ></span>
      </span>
    </td>
  `);
      }

      /**
       * Gets the inputs and adds a row when valid.
       * If invalid then the inputs are highlighted red.
       * When an add is successful then inputs are reset.
       */
      async function addRow() {
        // get values from the inputs
        const toDo = $("#add-to-do").val();

        // if any of the values are invalid, then do not add
        if (!toDo) {
          $("#row-add > td").css("background-color", "red");
          return;
        }
        $("#row-add > td").css("background-color", "white");

        // disable add fields and button until completed
        $("#add-to-do").prop("disabled", true);
        $("#btn-add").addClass("disabled");

        await $.ajax({
          type: "POST",
          url: "api/tasks?api_key=1",
          contentType: "application/json",
          dataType: "json",
          headers: {
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
          },
          data: JSON.stringify({
            task: {
              content: toDo,
            },
          }),
          success: function (response) {
            if (response && response.task) {
              data.push(response.task);
              renderRow(response.task);
              $("#add-to-do").val("");
            }
          },
          error: function (_request, _textStatus, errorMessage) {
            alert("Unable to add the task.");
            console.log(errorMessage);
          },
        });

        // enable add fields and button until completed
        $("#add-to-do").prop("disabled", false);
        $("#btn-add").removeClass("disabled");
      }

      /**
       * Remove the task for the provided taskId.
       *
       * @param {Number} taskId ID of the task.
       */
      function deleteRow(taskId) {
        $.ajax({
          type: "DELETE",
          url: `api/tasks/${taskId}?api_key=1`,
          headers: {
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
          },
          success: function (response) {
            if (response.success) {
              $(`#row-${taskId}`).remove();
              data = data.filter((r) => r.id !== taskId);
            }
          },
          error: function (_request, _textStatus, errorMessage) {
            alert("Unable to delete the task.");
            console.log(errorMessage);
          },
        });
      }

      /**
       * Toggles the completed state for the provided task.
       * Performs a request to change the completed state.
       * Will make sure the rendered task reflects the request state.
       * If a filter is applied, then the task will be removed when the completed state changes.
       *
       * @param {Number} taskId The ID of the task.
       */
      function toggleCompleted(taskId) {
        const index = data.findIndex((t) => t.id === taskId);
        let task = data[index];
        $.ajax({
          type: "PUT",
          url: `api/tasks/${task.id}/${
            task.completed ? "mark_active" : "mark_complete" // toggle
          }?api_key=1`,
          headers: {
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
          },
          dataType: "json",
          success: function (response, _textStatus) {
            // replace old task with new task
            task = response.task;
            data[index] = task;

            // update the view
            if (filter !== -1 && filter !== task.completed) {
              // if the filter is applied and the state changed, then remove it.
              $(`#row-${task.id}`).remove();
            } else {
              // update button state for task
              $(`#cb-${task.id}-completed`).prop("checked", task.completed);
              $(`#cb-label-${task.id}-completed`).prop(
                "title",
                task.completed
                  ? "Marked Completed. Click to make active again."
                  : "Currently Active. Click to mark as complete."
              );
            }
          },
          error: function (_request, _textStatus, errorMessage) {
            alert("Unable to toggle between completed and active.");
            console.log(errorMessage);
          },
        });
      }

      /**
       * Handles when the selection of the filter toggle is made.
       * Clears the table and rerenders based on the filter.
       *
       * @param {-1 | boolean} val The value of filter on.
       */
      function setFilter(val) {
        filter = val;
        $("tbody").empty();
        renderTable();
        localStorage.setItem("to-do-list-filter", filter);
      }
    </script>
    <style>
      body {
        background-image: url("https://i.pinimg.com/originals/f3/83/ee/f383ee4a8941896c2efaadfef75bfad6.jpg");
        background-size: cover;
      }

      .table > :not(caption) > * > * {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 5px;
      }

      :root {
        --size: 30;
        --line-width: 4;
        --check-green: #00aa1c;
        --checkbox-grey: #4a7182;
      }

      .checkbox-container {
        display: block;
        position: relative;
        cursor: pointer;
        margin-right: 30px;
      }

      .checkbox-container input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
      }

      .checkbox {
        position: absolute;
        top: 0;
        height: calc(var(--size) * 1px);
        width: calc(var(--size) * 1px);
        cursor: pointer;
        color: var(--checkbox-grey);
        border: calc(var(--line-width) * 1px) solid;
        border-radius: 50%;
        -webkit-transition: all 0.5s;
        -moz-transition: all 0.5s;
        -o-transition: all 0.5s;
        transition: all 0.5s;
      }

      .checkmark {
        position: absolute;
        top: 0;
        width: calc(var(--size) * 1px);
        height: calc(var(--size) * 1px);
        cursor: pointer;
      }

      .checkmark::before {
        position: absolute;
        left: 0;
        bottom: calc(var(--size) / 2.5 * 1px);
        height: calc(var(--line-width) * 1px);
        width: 0%;
        background-color: var(--check-green);
        content: "";
        transform: translateX(0px) rotate(45deg);
        transform-origin: left bottom;
        opacity: 1;
        -webkit-transition: all 0.5s;
        -moz-transition: all 0.5s;
        -o-transition: all 0.5s;
        transition: all 0.5s;
        transition-delay: 0.5s;
      }

      .checkmark::after {
        position: absolute;
        left: calc(var(--size) / 4.3 * 1px);
        bottom: calc(var(--size) / 23 * 1px);
        height: calc(var(--line-width) * 1px);
        width: 0%;
        background-color: var(--check-green);
        content: "";
        transform: translateX(calc(var(--size) / 8 * 1px)) rotate(-45deg);
        transform-origin: left bottom;
        opacity: 1;
        -webkit-transition: all 0.5s;
        -moz-transition: all 0.5s;
        -o-transition: all 0.5s;
        transition: all 0.5s;
        transition-delay: 1s;
      }

      .checkbox-container input:checked ~ .checkmark::before {
        opacity: 1;
        width: 50%;
      }

      .checkbox-container input:checked ~ .checkmark::after {
        opacity: 1;
        width: 100%;
      }

      .checkbox-container input:checked ~ .checkbox {
        opacity: 0;
        pointer-events: none;
      }

      .checkbox-container input:not(:checked) ~ .checkmark::before {
        transition-delay: 0.5s;
      }

      .checkbox-container input:not(:checked) ~ .checkmark::after {
        transition-delay: 0s;
      }

      .checkbox-container input:not(:checked) ~ .checkbox {
        transition-delay: 1s;
      }
    </style>
  </head>
  <body>
    <div class="container bg">
      <h1 class="text-center my-4">TO-DO List</h1>
      <table class="table table-responsive">
        <thead>
          <tr id="row-add">
            <td colspan="2">
              <input id="add-to-do" class="form-control" placeholder="TO-DO" />
            </td>
            <td style="width: 1%">
              <span
                id="btn-add"
                class="nav-item rounded-pill btn btn-primary"
                title="Click to add."
                onclick="addRow()"
              >
                <span class="nav-link"><i class="fas fa-plus"></i></span>
              </span>
            </td>
          </tr>
          <tr>
            <td colspan="3">
              <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-outline-success">
                  <input
                    id="filter-all"
                    type="radio"
                    name="options"
                    id="option1"
                    autocomplete="off"
                    onclick="setFilter(-1)"
                  />
                  All
                </label>
                <label class="btn btn-outline-success">
                  <input
                    id="filter-completed"
                    type="radio"
                    name="options"
                    id="option2"
                    autocomplete="off"
                    onclick="setFilter(true)"
                  />
                  Completed
                </label>
                <label class="btn btn-outline-success">
                  <input
                    id="filter-active"
                    type="radio"
                    name="options"
                    id="option3"
                    autocomplete="off"
                    onclick="setFilter(false)"
                  />
                  Active
                </label>
              </div>
            </td>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </body>
</html>
